 [alias]
  ; extended branch
  extendedBranch = !~/scripts/shell/git/branch.sh

  ; pr branch
  prBranchPrefix = !echo '__pr__'
  withPRPrefixCurrentBranch = !echo $(git prBranchPrefix)$(git currentBranch)
  withoutPRPrefixCurrentBranch = !git currentBranch | sed "s/$(git prBranchPrefix)//g"

  ; main branch
  grepMain = !git branch --format=%'(refname:short)' | grep -x main
  mainBranch = !test $(git grepMain) = "main" && echo 'main' || echo 'master'
  
  ; command
  statusFiles = !git status --porcelain | peco --query '$LBUFFER' | awk -F ' ' '{print $NF}'
  currentBranch = !git rev-parse --abbrev-ref HEAD
  pecoBranch = !peco --prompt 'GIT BRANCH>' | xargs
  localBranches = !git branch --sort=-committerdate | git pecoBranch | sed -e "s/^\\*\\s*//g"
  remoteBranches = !git branch --sort=-committerdate -r | grep -v -w HEAD | git pecoBranch | sed "s@origin/@@g"
  pecoCommit =  !peco --prompt 'GIT COMMIT>' | xargs
  commitHashes = !git log --oneline -100 | git pecoCommit | awk '{print $1}'

  ; copy
  ; copy = !xclip -selection clipboard -in ; for linux
  copy = !pbcopy ; for mac

  ; ps
  mkdirTmp = !mkdir -p ~/tmp-git
  storeSchemaHash = !xargs echo > ~/tmp-git/schema_hash.txt
  readSchemaHash = !cat ~/tmp-git/schema_hash.txt
  schemaLatestCommitHash = !cd ~/ghq/github.com/pocketsign/schema && git swl > /dev/null && git rev-parse HEAD
  fetchSchema = !git schemaLatestCommitHash | git storeSchemaHash && cd ~/ghq/github.com/pocketsign/bousai && task fetch:schema -- $(git readSchemaHash)

  ; clone
  cl = clone

  ; branch
  b = !git extendedBranch
  bl = !git branch --sort=-committerdate -l
  bm = branch -m
  bmp = !git branch -m $(git withPRPrefixCurrentBranch)
  bmpp = !git branch -m $(git withoutPRPrefixCurrentBranch)
  bd = !git branch -D
  bdl = !git branch -D $(git localBranches)
  bdp = !git branch --list "$(git prBranchPrefix)*" | xargs -n 1 git branch -D
  bdr = !git push -d origin $(git remoteBranches)
  bdm = !git branch --merged | grep -v -e main -e master -e develop | xargs git branch -d
  bdmb = !git switch $(git localBranches) && git branch --merged | grep -v -e main -e master -e develop | xargs git branch -d
  bc = !git currentBranch | git copy
  bcl = !git localBranches | git copy
  bcr = !git remoteBranches | git copy

  ; pr branch
  mai = !git switch $(git mainBranch)
  dev = switch develop
  sw = switch
  swc = switch -c
  swl = !git switch $(git localBranches)
  swr = !git checkout $(git remoteBranches)

  ; checkout
  ch = checkout
  chf = !git checkout $(git statusFiles)

  ; status
  s = status

  ; diff
  d = diff
  dc = diff --cached
  dm = !git diff $(git mainBranch)
  df = !git diff $(git statusFiles)

  ; add
  a = add
  au = add -u
  aa = add -A
  ap = add -p
  af = !git add $(git statusFiles)

  ; reset
  rh = reset HEAD
  rhf = !git reset HEAD $(git statusFiles)

  ; commit
  c = commit
  cm = commit -m
  ca = commit --amend
  cn = commit --no-verify
  coa = commit --abort
  coc = commit --continue
  cos = commit --skip

  ; cherry-pick
  cp = cherry-pick
  cpc = cherry-pick --continue
  cpa = cherry-pick --abort
  cps = cherry-pick --skip

  ; fetch
  f = fetch

  ; push
  p = push
  po = !git push origin $(git rev-parse --abbrev-ref HEAD)
  pop = !git push origin $(git rev-parse --abbrev-ref HEAD):$(git withoutPRPrefixCurrentBranch)
  pfo = !git push --force-with-lease origin $(git rev-parse --abbrev-ref HEAD)

  ; pull
  pu = pull
  pur = pull --rebase
  puo = !git pull origin --rebase $(git currentBranch)
  puop = !git pull origin --rebase $(git withoutPRPrefixCurrentBranch)

  ; log
  l = log
  lp = log -p
  ln= log --name-status
  lo = log --oneline -10
  lon = log --oneline
  lmc = !git log -1 --pretty=%B $(git commitHashes) | head -n 1 | tr -d '\n' | git copy
  lg = log --graph --decorate --pretty=oneline --branches --abbrev-commit --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(auto)%d%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  today = "!f () {\
             git log --oneline --branches \
               --since=midnight --date=iso \
               --author=\"$(git config user.name)\" \
               --format=\" - %C(green)(%ad)%Creset %C(auto)%h%Creset : %s\";\
           };f"

  ; stash
  st = stash
  sts = stash save
  stl = stash list
  sta = stash apply
  stp = stash pop
  std = stash drop

  ; rebase
  re = rebase
  rem = ! git rebase $(git mainBranch)
  red = rebase develop
  ree = rebase --edit-todo
  rec = rebase --continue
  rea = rebase --abort
  req = rebase --quit
  res = rebase --skip
  reh = rebase -i HEAD~~~~~~~~~
  reo = rebase --onto
  reb = !git rebase $(git localBranches)
  rebo = !git rebase --onto $(git localBranches)

  ; merge
  m = merge
  mb = !git merge $(git localBranches)
  mc = merge --continue
  ma = merge --abort
  ms = merge --skip

  ; show-branch
  derived-branch = !git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -1 | awk -F'[]~^[]' '{print $2}'

  ; ls-status
  lf = "!git ls-files | while read file; do echo \"$(git log -1 --format=\"%ai | %an\" -- \"$file\") | $file\"; done | sort -r | column -t -s \"|\""

  ; git webui
  webui = !~/.git-webui/release/libexec/git-core/git-webui

[user]
	name = hiroto.ohira
	email = hiroto100114@gmail.com
[core]
	editor = vim
	excludesfile = ~/.gitignore_global
	symlinks = true
[webui]
	autoupdate = true
[merge]
	tool = vimdiff
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	postBuffer = 524288000
[pager]
	log = diff-highlight | less -r
	show = diff-highlight | less -r
	diff = diff-highlight | less -r
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[url "ssh://git@github.com/pocketsign"]
	insteadOf = https://github.com/pocketsign
